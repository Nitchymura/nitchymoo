{"version":3,"names":[],"mappings":"","sources":["edit-photo.js"],"sourcesContent":["//edit-photo.js\r\n\r\n// public/js/edit-photo.js\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  // 既存の削除ボタン（Blade側で描画済み）にも対応するため、イベント委譲で受ける\r\n  document.addEventListener(\"click\", (e) => {\r\n    const btn = e.target.closest(\".delete-photo-btn\");\r\n    if (!btn) return;\r\n\r\n    e.preventDefault();\r\n\r\n    // data-preview-id は \"{postId}_{i}\" 形式\r\n    const previewKey = btn.dataset.previewId;\r\n    if (!previewKey) return;\r\n\r\n    const [postId, slot] = previewKey.split(\"_\");\r\n    handleDelete(postId, slot, btn);\r\n  });\r\n\r\n  // すべての file input に change をバインド\r\n  document.querySelectorAll(\".photo-input\").forEach((input) => {\r\n    input.addEventListener(\"change\", (e) => {\r\n      const id = e.currentTarget.id; // \"photo_{postId}_{i}\"\r\n      const parts = id.split(\"_\");\r\n      // [\"photo\", \"{postId}\", \"{i}\"]\r\n      const postId = parts[1];\r\n      const slot = parts[2];\r\n      handleFileChange(postId, slot, e.currentTarget.files);\r\n    });\r\n  });\r\n\r\n  /**\r\n   * 画像選択時の処理（プレビュー表示、削除ボタン生成、置換時の削除フラグ設定）\r\n   */\r\n  function handleFileChange(postId, slot, files) {\r\n    if (!files || !files.length) return;\r\n\r\n    const file = files[0];\r\n    // 軽いバリデーション（任意）\r\n    if (!file.type.startsWith(\"image/\")) return;\r\n\r\n    const previewWrap = document.getElementById(`preview_${postId}_${slot}`);\r\n    const placeholder = document.getElementById(`placeholder_${postId}_${slot}`);\r\n    const imgId = `preview_img_${postId}_${slot}`;\r\n    let img = document.getElementById(imgId);\r\n\r\n    // 既存画像がなければ img を作る\r\n    if (!img) {\r\n      img = document.createElement(\"img\");\r\n      img.id = imgId;\r\n      img.alt = `Photo ${slot}`;\r\n      img.className = \"image-lg img-thumbnail mb-2\";\r\n      // inputより前に差し込む（配置の都合で先頭へ）\r\n      previewWrap.insertBefore(img, previewWrap.querySelector(\"input[type=file]\"));\r\n    }\r\n\r\n    // プレビュー反映\r\n    const reader = new FileReader();\r\n    reader.onload = (ev) => {\r\n      img.src = ev.target.result;\r\n      if (placeholder) placeholder.classList.add(\"d-none\");\r\n      ensureDeleteButton(postId, slot, previewWrap);\r\n    };\r\n    reader.readAsDataURL(file);\r\n\r\n    // もし既存写真がある枠に新ファイルを入れたら「置換」とみなし削除フラグを1に\r\n    const existingIdInput = document.querySelector(\r\n      `input[name=\"existing_photos[${postId}][${slot}]\"]`\r\n    );\r\n    const deleteFlagInput = document.getElementById(`delete_photo_${postId}_${slot}`);\r\n    if (existingIdInput && existingIdInput.value) {\r\n      // 既存がある → 置換＝削除フラグON（サーバ側で古い方を消して新規を保存する想定）\r\n      if (deleteFlagInput) deleteFlagInput.value = \"1\";\r\n    } else {\r\n      // 新規枠 → 削除フラグは常に0\r\n      if (deleteFlagInput) deleteFlagInput.value = \"0\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * プレビュー領域に削除ボタンがなければ作る\r\n   */\r\n  function ensureDeleteButton(postId, slot, previewWrap) {\r\n    let btn = previewWrap.querySelector(\".delete-photo-btn\");\r\n    if (btn) return;\r\n\r\n    btn = document.createElement(\"button\");\r\n    btn.type = \"button\";\r\n    btn.className = \"btn btn-danger delete-photo-btn\";\r\n    btn.dataset.previewId = `${postId}_${slot}`;\r\n    btn.innerHTML = '<i class=\"fa-solid fa-trash-can py-1 px-1\"></i>';\r\n    // 位置指定は既存のCSSに依存。position-relative 親の中で重ねたいならここで調整可\r\n    previewWrap.appendChild(btn);\r\n  }\r\n\r\n  /**\r\n   * 削除ボタンクリック時の処理\r\n   * - プレビュー画像を消す\r\n   * - input[type=file] をリセット\r\n   * - placeholder を戻す\r\n   * - 既存画像がある場合は delete_flag=1、新規だけなら delete_flag=0\r\n   */\r\n  function handleDelete(postId, slot, btnEl) {\r\n    const previewWrap = document.getElementById(`preview_${postId}_${slot}`);\r\n    if (!previewWrap) return;\r\n\r\n    // 画像プレビュー削除\r\n    const img = document.getElementById(`preview_img_${postId}_${slot}`);\r\n    if (img) img.remove();\r\n\r\n    // placeholder 戻す\r\n    const placeholder = document.getElementById(`placeholder_${postId}_${slot}`);\r\n    if (placeholder) placeholder.classList.remove(\"d-none\");\r\n\r\n    // file input をクリア\r\n    const fileInput = document.getElementById(`photo_${postId}_${slot}`);\r\n    if (fileInput) fileInput.value = \"\";\r\n\r\n    // 削除フラグ設定\r\n    const existingIdInput = document.querySelector(\r\n      `input[name=\"existing_photos[${postId}][${slot}]\"]`\r\n    );\r\n    const deleteFlagInput = document.getElementById(`delete_photo_${postId}_${slot}`);\r\n    if (deleteFlagInput) {\r\n      // 既存があったなら1（サーバで削除）。無ければ0（単に未選択に戻しただけ）\r\n      deleteFlagInput.value = existingIdInput && existingIdInput.value ? \"1\" : \"0\";\r\n    }\r\n\r\n    // ボタン自体は残しても良いが、見た目上消す\r\n    if (btnEl && btnEl.parentElement === previewWrap) {\r\n      btnEl.remove();\r\n    }\r\n  }\r\n});"],"file":"edit-photo.js"}