{"version":3,"names":[],"mappings":"","sources":["photo-uploader-bridge.js"],"sourcesContent":["//photo-uploader-bridge.js\r\n\r\n// public/js/photos-uploader-bridge.js\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  const bulk = document.getElementById(\"photos-uploader\");\r\n  if (!bulk) return;\r\n\r\n  bulk.addEventListener(\"change\", (e) => {\r\n    const files = Array.from(e.target.files || []);\r\n    if (!files.length) return;\r\n\r\n    // すべてのスロット用 hidden input を取得（順番どおりに配分）\r\n    const slotInputs = Array.from(document.querySelectorAll(\"input.photo-input\"));\r\n\r\n    files.forEach((file) => {\r\n      // 空いている（=プレビュー画像がまだない）スロットを探す\r\n      const targetInput = findNextEmptySlot(slotInputs);\r\n      if (!targetInput) {\r\n        console.warn(\"No empty photo slot available.\");\r\n        return;\r\n      }\r\n      // 1ファイルをそのスロットの input.files にセット（DataTransfer 経由）\r\n      assignFileToInput(targetInput, file);\r\n\r\n      // 既存の edit-photo.js の change ハンドラに乗せる\r\n      targetInput.dispatchEvent(new Event(\"change\", { bubbles: true }));\r\n    });\r\n\r\n    // 同じファイルを再選択できるよう、値をクリア\r\n    bulk.value = \"\";\r\n  });\r\n\r\n  /**\r\n   * 空きスロット判定：\r\n   * - プレビュー領域に <img> が無い（=未使用）\r\n   * - かつ input 自体にファイル未設定\r\n   * - 既存画像が表示中の枠はスキップ（置換はユーザーが削除ボタンを押して空ける想定）\r\n   */\r\n  function findNextEmptySlot(slotInputs) {\r\n    for (const input of slotInputs) {\r\n      const idParts = input.id.split(\"_\"); // photo_{postId}_{i}\r\n      const postId = idParts[1];\r\n      const slot = idParts[2];\r\n      const previewWrap = document.getElementById(`preview_${postId}_${slot}`);\r\n      const hasImg = previewWrap?.querySelector(`#preview_img_${postId}_${slot}`);\r\n      const hasFile = input.files && input.files.length > 0;\r\n      if (!hasImg && !hasFile) {\r\n        return input;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * DataTransfer を使って input.files に 1ファイルを設定\r\n   * （モダンブラウザ対応：Chrome/Edge/Firefox）\r\n   */\r\n  function assignFileToInput(input, file) {\r\n    const dt = new DataTransfer();\r\n    dt.items.add(file);\r\n    input.files = dt.files;\r\n  }\r\n});"],"file":"photo-uploader-bridge.js"}